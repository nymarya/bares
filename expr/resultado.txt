expressÃµes lidas:
 ' 10000000 - 2 '
' 2+ '
' 3 * d '
' 2 = 3 '
' 2.3 + 4 '
' 2 * 3 4 '
' 2 ** 3 '
' %5 * 10 '
' *5 * 10 '
' (2+3)*/(1-4) '
' (-3*4)(10*5) '
' 2 - 4) '
' 2) - 4 '
' )2 - 4 '
' ((2%3) * 8 '
' 3/(1-1) '
' 10/(3*3^-2) '
' 20*20000 '
' 25 / (2+3) * 8 '
' 5 % 2 ^4 '
' (5 % 3) ^4 '
' -----3 '
===============================================================================
>>> Parsing "10000000 - 2"
>>> Integer constant out of range beginning at column (1)!
"10000000 - 2"
 ^           
===============================================================================
>>> Parsing "2+"
>>> Missing <term> at column (3)!
"2+"
   
===============================================================================
>>> Parsing "3 * d"
>>> Ill formed integer at column (5)!
"3 * d"
     ^
===============================================================================
>>> Parsing "2 = 3"
>>> Extraneous symbol after valid expression found at column (3)!
"2 = 3"
   ^  
===============================================================================
>>> Parsing "2.3 + 4"
>>> Extraneous symbol after valid expression found at column (2)!
"2.3 + 4"
  ^     
===============================================================================
>>> Parsing "2 * 3 4"
>>> Extraneous symbol after valid expression found at column (7)!
"2 * 3 4"
       ^
===============================================================================
>>> Parsing "2 ** 3"
>>> Ill formed integer at column (4)!
"2 ** 3"
    ^  
===============================================================================
>>> Parsing "%5 * 10"
>>> Ill formed integer at column (1)!
"%5 * 10"
 ^      
===============================================================================
>>> Parsing "*5 * 10"
>>> Ill formed integer at column (1)!
"*5 * 10"
 ^      
===============================================================================
>>> Parsing "(2+3)*/(1-4)"
>>> Ill formed integer at column (7)!
"(2+3)*/(1-4)"
       ^     
===============================================================================
>>> Parsing "(-3*4)(10*5)"
>>> Extraneous symbol after valid expression found at column (7)!
"(-3*4)(10*5)"
       ^     
===============================================================================
>>> Parsing "2 - 4)"
>>> Extraneous symbol after valid expression found at column (6)!
"2 - 4)"
      ^
===============================================================================
>>> Parsing "2) - 4"
>>> Extraneous symbol after valid expression found at column (2)!
"2) - 4"
  ^    
===============================================================================
>>> Parsing ")2 - 4"
>>> Ill formed integer at column (1)!
")2 - 4"
 ^     
===============================================================================
>>> Parsing "((2%3) * 8"
>>> Missing closing ")" at column (10)!
"((2%3) * 8"
          ^
===============================================================================
>>> Parsing "3/(1-1)"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <3,OPERAND> </,OPERATOR> <(,OPENING SCOPE> <1,OPERAND> <-,OPERATOR> <1,OPERAND> <),CLOSING SCOPE> }
>>> Division by zero!
===============================================================================
>>> Parsing "10/(3*3^-2)"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <10,OPERAND> </,OPERATOR> <(,OPENING SCOPE> <3,OPERAND> <*,OPERATOR> <3,OPERAND> <^,OPERATOR> <-2,OPERAND> <),CLOSING SCOPE> }
>>> Division by zero!
===============================================================================
>>> Parsing "20*20000"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <20,OPERAND> <*,OPERATOR> <20000,OPERAND> }
>>> Numeric overflow error!
===============================================================================
>>> Parsing "25 / (2+3) * 8"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <25,OPERAND> </,OPERATOR> <(,OPENING SCOPE> <2,OPERAND> <+,OPERATOR> <3,OPERAND> <),CLOSING SCOPE> <*,OPERATOR> <8,OPERAND> }
>>> Result is: 40
===============================================================================
>>> Parsing "5 % 2 ^4"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <5,OPERAND> <%,OPERATOR> <2,OPERAND> <^,OPERATOR> <4,OPERAND> }
>>> Result is: 5
===============================================================================
>>> Parsing "(5 % 3) ^4"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <(,OPENING SCOPE> <5,OPERAND> <%,OPERATOR> <3,OPERAND> <),CLOSING SCOPE> <^,OPERATOR> <4,OPERAND> }
>>> Result is: 16
===============================================================================
>>> Parsing "-----3"
>>> Expression SUCCESSFULLY parsed!
>>> Tokens: { <-3,OPERAND> }
>>> Result is: 

>>> Normal parsing...
